# CI/CD Default Base Image -> A pipeline step starts in this image
image: docker:stable

# Variables to allow for Docker in Docker (so we can build containers)
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375

# CI/CD Service definition -> More Requirements for Docker in Docker
services:
  - name: docker:dind
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]

# Ran Before Every Script -> Good Practice to Make sure Docker is setup Correctly
before_script:
  - docker info

 # List of stages for jobs, and their order of execution
stages:         
#  - build
#  - static_analysis
#  - test_unit
#  - test_integration
  - deploy



# I will add deploy steps here for heroku after I write the heroku.yml file
# here is some boilerplate but I don't think it works for containerized apps
# This deploy job uses a simple deploy flow to Heroku, other providers, e.g. AWS Elastic Beanstalk
# are supported too: https://github.com/travis-ci/dpl
deploy:
  stage: deploy
#  image: alpine:3
  environment: production
  script:
    - apk add ruby-dev
    - apk add git
    - gem install dpl
    - gem install dpl-heroku
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_PRODUCTION_KEY
  only:
    - main