# CI/CD Default Base Image -> A pipeline step starts in this image
image: docker:stable

# Variables to allow for Docker in Docker (so we can build containers)
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  # $CI_REGISTRY_IMAGE is the address of the registry tied to this project.
  # $CI_COMMIT_REF_NAME resolves to branch or tag name it is safer to use $CI_COMMIT_REF_SLUG as the image tag. 

# CI/CD Service definition -> More Requirements for Docker in Docker
services:
  - name: docker:dind
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]

# Ran Before Every Script -> Good Practice to Make sure Docker is setup Correctly
before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

 # List of stages for jobs, and their order of execution
stages:         
  - build
  - static_analysis
  - test_unit
  - test_integration
  - deploy

# This job runs in the build stage, which runs first.
build-job:  # Name  
  stage: build # Stage
  before_script: 
    - docker version
    # needs to login here too apparently.
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script: # Main part of the build-stage
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE  

rubocop: # Name
  stage: static_analysis    # Stage 
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run $CONTAINER_TEST_IMAGE rubocop --fail-level error || exit $?

# https://docs.gitlab.com/ee/ci/testing/unit_test_reports.html
# unit test reports not working...
unit-test-job:   # This job runs in the test stage.
  stage: test_unit    # Stage 
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    #- docker run $CONTAINER_TEST_IMAGE rspec --format progress --format RspecJunitFormatter --out rspec.xml || exit $?
    - docker run $CONTAINER_TEST_IMAGE rspec || exit $?
#  artifacts:
#    when: always
#    paths:
#      - rspec.xml
#    reports:
#      junit: rspec.xml

# TODO: fancy coverage reports from simplecov in gitlab: 
# https://dev.to/omrisama/getting-started-with-simplecov-in-gitlab-ci-259e

integration-test-job:   # This job runs in the test stage.
  stage: test_integration    # Stage 
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run $CONTAINER_TEST_IMAGE cucumber || exit $?

# This deploy job uses a simple (HAHA) deploy flow to Heroku, other providers, e.g. AWS Elastic Beanstalk
# are supported too: https://github.com/travis-ci/dpl
deploy:
  stage: deploy
  environment: production
  script:
    - apk add ruby-dev # dpl needs ruby
    - apk add git # container doesn't have git for some reason
    - apk add curl # or curl?!?
    - gem install json_pure # another dumb error message removed by this line
    - gem install faraday -v 1.8.0 # this is getting old.
    - gem install dpl # this is the only line in the docs
    - gem install dpl-heroku # another one for fun
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_PRODUCTION_KEY
  only:
    - main